/*
Copyright SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

import {newAries, newAriesREST} from "../common.js"
import {environment} from "../environment.js";

const agentControllerApiUrl = `${environment.HTTP_SCHEME}://${environment.USER_HOST}:${environment.USER_API_PORT}`

// did document
const didName = "alice-did"
const didID = "did:peer:21tDAKCERh95uGgKbJNHYp"
const doc = `
{
  "@context": ["https://w3id.org/did/v1","https://w3id.org/did/v2"],
  "id": "did:peer:21tDAKCERh95uGgKbJNHYp",
  "publicKey": [
    {
      "id": "did:peer:123456789abcdefghi#keys-1",
      "type": "Secp256k1VerificationKey2018",
      "controller": "did:peer:123456789abcdefghi",
      "publicKeyBase58": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
    },
    {
      "id": "did:peer:123456789abcdefghw#key2",
      "type": "RsaVerificationKey2018",
      "controller": "did:peer:123456789abcdefghw",
      "publicKeyPem": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAryQICCl6NZ5gDKrnSztO\\n3Hy8PEUcuyvg/ikC+VcIo2SFFSf18a3IMYldIugqqqZCs4/4uVW3sbdLs/6PfgdX\\n7O9D22ZiFWHPYA2k2N744MNiCD1UE+tJyllUhSblK48bn+v1oZHCM0nYQ2NqUkvS\\nj+hwUU3RiWl7x3D2s9wSdNt7XUtW05a/FXehsPSiJfKvHJJnGOX0BgTvkLnkAOTd\\nOrUZ/wK69Dzu4IvrN4vs9Nes8vbwPa/ddZEzGR0cQMt0JBkhk9kU/qwqUseP1QRJ\\n5I1jR4g8aYPL/ke9K35PxZWuDp3U0UPAZ3PjFAh+5T+fc7gzCs9dPzSHloruU+gl\\nFQIDAQAB\\n-----END PUBLIC KEY-----"
    }
  ]
}`

// scenarios
describe("VDRI", function () {
    let agents
    before(async () => {
        await Promise.all([newAries('demo','demo-agent', ["sidetree@http://localhost:48326/document"]), newAriesREST(agentControllerApiUrl)]).then(
            values => {
                agents = values
            }
        ).catch(
            err => {
                throw err
            }
        )
    })

    after(() => {
        agents.forEach(
            (agent) => {
                agent.destroy()
            }
        )
    })

    it("create public DID using VDRI in WASM and REST Client mode", async function (done) {
        if (!agents || agents.length == 0) {
            done("invalid agents initialized")
        }

        agents.forEach(
            async (agent) => {
                var resp
                try {
                    resp = await agent.vdri.createPublicDID({
                        method: "sidetree",
                        header: '{"alg":"","kid":"","operation":"create"}'
                    })
                } catch (err) {
                    done(err)
                }
                console.log("resp is ", resp)
            }
        )
        done()
    })

    it("Alice stores the did generated by her", async function (done) {
        agents.forEach(
            async (agent) => {
                var resp
                try {
                    resp = await agent.vdri.saveDID({
                        name: didName,
                        did: doc
                    })
                } catch (err) {
                    done(err)
                }
                console.log("resp is ", resp)
            }
        )
        done()
    })

    it("Alice retrieves the did from store", async function (done) {
        agents.forEach(
            async (agent) => {
                var resp
                try {
                    resp = await agent.vdri.getDID({
                        id: didID,
                    })
                } catch (err) {
                    done(err)
                }
                console.log("resp is ", resp)
            }
        )
        done()
    })
    it("Alice validates that she has one did", function (done) {
        agents.forEach(
            async (agent) => {
                var resp
                try {
                    resp = await agent.vdri.getDIDRecords().then(
                        resp => {
                            try {
                                assert.equal(1, resp.result.length)
                                assert.equal(didID, resp.result[0].id)
                                assert.equal(didName, resp.result[0].name)
                            } catch (err) {
                                done(err)
                            }}
                        )
                } catch (err) {
                    done(err)
                }
                console.log("resp is ", resp)
            }
        )
        done()
    })
})
