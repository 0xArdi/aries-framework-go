/*
 Copyright SecureKey Technologies Inc. All Rights Reserved.

 SPDX-License-Identifier: Apache-2.0
*/

package localkms

import (
	"bytes"
	"fmt"

	"github.com/google/tink/go/aead"
	"github.com/google/tink/go/keyset"
	"github.com/google/tink/go/signature"
	tinkpb "github.com/google/tink/proto/tink_go_proto"

	"github.com/hyperledger/aries-framework-go/pkg/kms/localkms/internal/keywrapper"
	"github.com/hyperledger/aries-framework-go/pkg/secretlock"
	"github.com/hyperledger/aries-framework-go/pkg/storage"
)

const (
	namespace = "kmsdb"
)

type provider interface {
	StorageProvider() storage.Provider
	SecretLock() secretlock.Service
}

// LocalKMS implements kms.KeyManager to provide key management capabilities using a local db.
// It uses an underlying secret lock service (default local secretLock) to wrap (encrypt) keys
// prior to storing them.
type LocalKMS struct {
	secretLock       secretlock.Service
	masterKeyURI     string
	store            storage.Store
	masterKeyEnvAEAD *aead.KMSEnvelopeAEAD
}

// New will create a new (local) KMS service
func New(masterKeyURI string, p provider) (*LocalKMS, error) {
	store, err := p.StorageProvider().OpenStore(namespace)
	if err != nil {
		return nil, fmt.Errorf("failed to ceate local kms: %w", err)
	}

	secretLock := p.SecretLock()

	kw, err := keywrapper.New(secretLock, masterKeyURI)
	if err != nil {
		return nil, err
	}

	// create a KMSEnvelopeAEAD instance to wrap/unwrap keys managed by LocalKMS
	masterKeyEnvAEAD := aead.NewKMSEnvelopeAEAD(*aead.AES256GCMKeyTemplate(), kw)

	return &LocalKMS{store: store, secretLock: secretLock, masterKeyURI: masterKeyURI, masterKeyEnvAEAD: masterKeyEnvAEAD},
		nil
}

// Create a new key/keyset for key type kt, store it and return its stored ID and key handle
func (l *LocalKMS) Create(kt string) (string, interface{}, error) {
	if kt == "" {
		return "", nil, fmt.Errorf("failed to create new key, missing key type")
	}

	keyTemplate, err := getKeyTemplate(kt)
	if err != nil {
		return "", nil, err
	}

	kh, err := keyset.NewHandle(keyTemplate)
	if err != nil {
		return "", nil, err
	}

	kID, err := l.storeKeySet(kh)
	if err != nil {
		return "", nil, err
	}

	return kID, kh, nil
}

// Get key handle for the given keyID
func (l *LocalKMS) Get(keyID string) (interface{}, error) {
	return l.getKeySet(keyID)
}

// Rotate a key referenced by keyID and return its updated handle
func (l *LocalKMS) Rotate(kt, keyID string) (string, interface{}, error) {
	kh, err := l.getKeySet(keyID)
	if err != nil {
		return "", nil, err
	}

	keyTemplate, err := getKeyTemplate(kt)
	if err != nil {
		return "", nil, err
	}

	km := keyset.NewManagerFromHandle(kh)

	err = km.Rotate(keyTemplate)
	if err != nil {
		return "", nil, err
	}

	updatedKH, err := km.Handle()

	if err != nil {
		return "", nil, err
	}

	err = l.store.Delete(keyID)
	if err != nil {
		return "", nil, err
	}

	newID, err := l.storeKeySet(updatedKH)
	if err != nil {
		return "", nil, err
	}

	return newID, updatedKH, nil
}

// nolint:gocyclo
func getKeyTemplate(keyType string) (*tinkpb.KeyTemplate, error) {
	switch keyType {
	case "AES128GCM":
		return aead.AES128GCMKeyTemplate(), nil
	case "AES256GCMNoPrefix":
		// RAW (to support keys not generated by Tink)
		return aead.AES256GCMNoPrefixKeyTemplate(), nil
	case "AES256GCM":
		return aead.AES256GCMKeyTemplate(), nil
	case "ChaCha20Poly1305":
		return aead.ChaCha20Poly1305KeyTemplate(), nil
	case "XChaCha20Poly1305":
		return aead.XChaCha20Poly1305KeyTemplate(), nil
	case "ECDSAP256":
		return signature.ECDSAP256KeyTemplate(), nil
	case "ECDSAP384":
		return signature.ECDSAP384KeyTemplate(), nil
	case "ECDSAP521":
		return signature.ECDSAP521KeyTemplate(), nil
	case "ED25519":
		return signature.ED25519KeyTemplate(), nil
	default:
		return nil, fmt.Errorf("key type unrecognized")
	}
}

func (l *LocalKMS) storeKeySet(kh *keyset.Handle) (string, error) {
	w := newWriter(l.store, l.masterKeyURI)

	buf := new(bytes.Buffer)
	jsonKeysetWriter := keyset.NewJSONWriter(buf)

	err := kh.Write(jsonKeysetWriter, l.masterKeyEnvAEAD)
	if err != nil {
		return "", err
	}

	// write buffer to localstorage
	_, err = w.Write(buf.Bytes())
	if err != nil {
		return "", err
	}

	return w.KeysetID, nil
}

func (l *LocalKMS) getKeySet(id string) (*keyset.Handle, error) {
	localDBReader := newReader(l.store, id)
	jsonKeysetReader := keyset.NewJSONReader(localDBReader)

	// Read reads the encrypted keyset handle back from the io.reader implementation
	// and decrypts it using masterKeyEnvAEAD.
	kh, err := keyset.Read(jsonKeysetReader, l.masterKeyEnvAEAD)
	if err != nil {
		return nil, err
	}

	return kh, nil
}
